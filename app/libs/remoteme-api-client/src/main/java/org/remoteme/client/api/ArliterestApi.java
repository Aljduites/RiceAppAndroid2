/**
 * Remoteme rest for advanced integration
 * If You want i can hide it but there is nothing danger
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@remoteme.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.remoteme.client.api;

import org.remoteme.client.invoker.ApiException;
import org.remoteme.client.invoker.ApiInvoker;
import org.remoteme.client.invoker.Pair;

import org.remoteme.client.model.*;

import java.util.*;

import org.remoteme.client.model.AMessage;
import org.remoteme.client.model.AVariableValue;
import org.remoteme.client.model.AndroidRegisterDto;
import org.remoteme.client.model.DeviceDto;
import org.remoteme.client.model.HelloDto;
import org.remoteme.client.model.PlainResultDto;
import org.remoteme.client.model.RegisterDto;
import org.remoteme.client.model.StandardResponse;
import org.remoteme.client.model.TokenDto;

import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.Map;
import java.util.HashMap;
import java.io.File;

public class ArliterestApi {
  String basePath = "https://app.remoteme.org";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
   * generateToken
   * token can be later use for authorize requests, and websockets, then add it in header as ARLiteToken
   * @param username username
   * @param password password
   * @param aRLiteToken generated token
   * @return TokenDto
   */
  public TokenDto  getARLiteTokenUsingGET (String username, String password, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'username' is set
    if (username == null) {
       throw new ApiException(400, "Missing the required parameter 'username' when calling getARLiteTokenUsingGET");
    }
    // verify the required parameter 'password' is set
    if (password == null) {
       throw new ApiException(400, "Missing the required parameter 'password' when calling getARLiteTokenUsingGET");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/getToken/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));
    localVarHeaderParams.put("username", ApiInvoker.parameterToString(username));
    localVarHeaderParams.put("password", ApiInvoker.parameterToString(password));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (TokenDto) ApiInvoker.deserialize(localVarResponse, "", TokenDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * getVariableValue
   * 
   * @param name name
   * @param type type
   * @param aRLiteToken generated token
   * @return AVariableValue
   */
  public AVariableValue  getVariableValueUsingGET (String name, String type, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
       throw new ApiException(400, "Missing the required parameter 'name' when calling getVariableValueUsingGET");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
       throw new ApiException(400, "Missing the required parameter 'type' when calling getVariableValueUsingGET");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/getVariableValue/{name}/{type}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString())).replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (AVariableValue) ApiInvoker.deserialize(localVarResponse, "", AVariableValue.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * hello
   * 
   * @param name name
   * @param aRLiteToken generated token
   * @return HelloDto
   */
  public HelloDto  helloUsingGET (String name, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
       throw new ApiException(400, "Missing the required parameter 'name' when calling helloUsingGET");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/hello/{name}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (HelloDto) ApiInvoker.deserialize(localVarResponse, "", HelloDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * clears session
   * clear session cookie at server side - usefull for logout since server creating session
   * @param aRLiteToken generated token
   * @return PlainResultDto
   */
  public PlainResultDto  logoutUsingGET (String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/logout/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (PlainResultDto) ApiInvoker.deserialize(localVarResponse, "", PlainResultDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Register
   * Registers device - return deviceId new or old one
   * @param registerDto registerDto
   * @param aRLiteToken generated token
   * @return RegisterDto
   */
  public RegisterDto  registerErUsingPOST (AndroidRegisterDto registerDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = registerDto;
    // verify the required parameter 'registerDto' is set
    if (registerDto == null) {
       throw new ApiException(400, "Missing the required parameter 'registerDto' when calling registerErUsingPOST");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/registerEr/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (RegisterDto) ApiInvoker.deserialize(localVarResponse, "", RegisterDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * Register
   * Registers device - return deviceId new or old one
   * @param registerDto registerDto
   * @param aRLiteToken generated token
   * @return RegisterDto
   */
  public RegisterDto  registerUsingPOST (AndroidRegisterDto registerDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = registerDto;
    // verify the required parameter 'registerDto' is set
    if (registerDto == null) {
       throw new ApiException(400, "Missing the required parameter 'registerDto' when calling registerUsingPOST");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/register/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (RegisterDto) ApiInvoker.deserialize(localVarResponse, "", RegisterDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * sendRemoteMeMessage
   * 
   * @param messageDto messageDto
   * @param aRLiteToken generated token
   * @return StandardResponse
   */
  public StandardResponse  sendRemoteMeMessageUsingPUT (AMessage messageDto, String aRLiteToken) throws ApiException {
    Object localVarPostBody = messageDto;
    // verify the required parameter 'messageDto' is set
    if (messageDto == null) {
       throw new ApiException(400, "Missing the required parameter 'messageDto' when calling sendRemoteMeMessageUsingPUT");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/sendMessage/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (StandardResponse) ApiInvoker.deserialize(localVarResponse, "", StandardResponse.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * send
   * 
   * @param aRLiteToken generated token
   * @return List<DeviceDto>
   */
  public List<DeviceDto>  sendUsingGET2 (String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/getAllDevices/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (List<DeviceDto>) ApiInvoker.deserialize(localVarResponse, "array", DeviceDto.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * throwError
   * just throw error noting more so u can check
   * @param aRLiteToken generated token
   * @return Integer
   */
  public Integer  throwErrorUsingGET (String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/throwError/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
  /**
   * updateMessageToken
   * 
   * @param deviceId deviceId
   * @param messageToken messageToken
   * @param aRLiteToken generated token
   * @return StandardResponse
   */
  public StandardResponse  updateMessageTokenUsingPUT (Integer deviceId, String messageToken, String aRLiteToken) throws ApiException {
    Object localVarPostBody = null;
    // verify the required parameter 'deviceId' is set
    if (deviceId == null) {
       throw new ApiException(400, "Missing the required parameter 'deviceId' when calling updateMessageTokenUsingPUT");
    }
    // verify the required parameter 'messageToken' is set
    if (messageToken == null) {
       throw new ApiException(400, "Missing the required parameter 'messageToken' when calling updateMessageTokenUsingPUT");
    }

    // create path and map variables
    String localVarPath = "/arLite/rest/v1/addMessageToken/{deviceId}/{messageToken}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deviceId" + "\\}", apiInvoker.escapeString(deviceId.toString())).replaceAll("\\{" + "messageToken" + "\\}", apiInvoker.escapeString(messageToken.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    // form params
    Map<String, String> localVarFormParams = new HashMap<String, String>();


    localVarHeaderParams.put("ARLiteToken", ApiInvoker.parameterToString(aRLiteToken));

    String[] localVarContentTypes = {
      "application/json"
    };
    String localVarContentType = localVarContentTypes.length > 0 ? localVarContentTypes[0] : "application/json";

    if (localVarContentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      localVarPostBody = localVarBuilder.build();
    } else {
      // normal form params
          }

    try {
      String localVarResponse = apiInvoker.invokeAPI(basePath, localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarContentType);
      if(localVarResponse != null){
        return (StandardResponse) ApiInvoker.deserialize(localVarResponse, "", StandardResponse.class);
      }
      else {
        return null;
      }
    } catch (ApiException ex) {
      throw ex;
    }
  }
}
